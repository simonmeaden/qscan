// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: book.proto

#ifndef PROTOBUF_INCLUDED_book_2eproto
#define PROTOBUF_INCLUDED_book_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_book_2eproto 

namespace protobuf_book_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_book_2eproto
namespace QScan {
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageData;
class ImageDataDefaultTypeInternal;
extern ImageDataDefaultTypeInternal _ImageData_default_instance_;
class Page;
class PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class Pages;
class PagesDefaultTypeInternal;
extern PagesDefaultTypeInternal _Pages_default_instance_;
class Style;
class StyleDefaultTypeInternal;
extern StyleDefaultTypeInternal _Style_default_instance_;
class TextList;
class TextListDefaultTypeInternal;
extern TextListDefaultTypeInternal _TextList_default_instance_;
}  // namespace QScan
namespace google {
namespace protobuf {
template<> ::QScan::Image* Arena::CreateMaybeMessage<::QScan::Image>(Arena*);
template<> ::QScan::ImageData* Arena::CreateMaybeMessage<::QScan::ImageData>(Arena*);
template<> ::QScan::Page* Arena::CreateMaybeMessage<::QScan::Page>(Arena*);
template<> ::QScan::Pages* Arena::CreateMaybeMessage<::QScan::Pages>(Arena*);
template<> ::QScan::Style* Arena::CreateMaybeMessage<::QScan::Style>(Arena*);
template<> ::QScan::TextList* Arena::CreateMaybeMessage<::QScan::TextList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace QScan {

// ===================================================================

class Style : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QScan.Style) */ {
 public:
  Style();
  virtual ~Style();

  Style(const Style& from);

  inline Style& operator=(const Style& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Style(Style&& from) noexcept
    : Style() {
    *this = ::std::move(from);
  }

  inline Style& operator=(Style&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Style& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Style* internal_default_instance() {
    return reinterpret_cast<const Style*>(
               &_Style_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Style* other);
  friend void swap(Style& a, Style& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Style* New() const final {
    return CreateMaybeMessage<Style>(NULL);
  }

  Style* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Style>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Style& from);
  void MergeFrom(const Style& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Style* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 style = 1;
  void clear_style();
  static const int kStyleFieldNumber = 1;
  ::google::protobuf::uint32 style() const;
  void set_style(::google::protobuf::uint32 value);

  // uint32 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::uint32 start() const;
  void set_start(::google::protobuf::uint32 value);

  // uint32 length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:QScan.Style)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 style_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_book_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TextList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QScan.TextList) */ {
 public:
  TextList();
  virtual ~TextList();

  TextList(const TextList& from);

  inline TextList& operator=(const TextList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextList(TextList&& from) noexcept
    : TextList() {
    *this = ::std::move(from);
  }

  inline TextList& operator=(TextList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextList* internal_default_instance() {
    return reinterpret_cast<const TextList*>(
               &_TextList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TextList* other);
  friend void swap(TextList& a, TextList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextList* New() const final {
    return CreateMaybeMessage<TextList>(NULL);
  }

  TextList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TextList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TextList& from);
  void MergeFrom(const TextList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QScan.Style styles = 3;
  int styles_size() const;
  void clear_styles();
  static const int kStylesFieldNumber = 3;
  ::QScan::Style* mutable_styles(int index);
  ::google::protobuf::RepeatedPtrField< ::QScan::Style >*
      mutable_styles();
  const ::QScan::Style& styles(int index) const;
  ::QScan::Style* add_styles();
  const ::google::protobuf::RepeatedPtrField< ::QScan::Style >&
      styles() const;

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:QScan.TextList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::QScan::Style > styles_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_book_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QScan.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:QScan.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_book_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QScan.ImageData) */ {
 public:
  ImageData();
  virtual ~ImageData();

  ImageData(const ImageData& from);

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageData(ImageData&& from) noexcept
    : ImageData() {
    *this = ::std::move(from);
  }

  inline ImageData& operator=(ImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageData* internal_default_instance() {
    return reinterpret_cast<const ImageData*>(
               &_ImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ImageData* other);
  friend void swap(ImageData& a, ImageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageData* New() const final {
    return CreateMaybeMessage<ImageData>(NULL);
  }

  ImageData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageData& from);
  void MergeFrom(const ImageData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .QScan.Image image = 3;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  private:
  const ::QScan::Image& _internal_image() const;
  public:
  const ::QScan::Image& image() const;
  ::QScan::Image* release_image();
  ::QScan::Image* mutable_image();
  void set_allocated_image(::QScan::Image* image);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:QScan.ImageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::QScan::Image* image_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_book_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QScan.Page) */ {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(Page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Page* other);
  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Page* New() const final {
    return CreateMaybeMessage<Page>(NULL);
  }

  Page* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Page>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QScan.TextList text = 5;
  int text_size() const;
  void clear_text();
  static const int kTextFieldNumber = 5;
  ::QScan::TextList* mutable_text(int index);
  ::google::protobuf::RepeatedPtrField< ::QScan::TextList >*
      mutable_text();
  const ::QScan::TextList& text(int index) const;
  ::QScan::TextList* add_text();
  const ::google::protobuf::RepeatedPtrField< ::QScan::TextList >&
      text() const;

  // repeated .QScan.ImageData images = 6;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 6;
  ::QScan::ImageData* mutable_images(int index);
  ::google::protobuf::RepeatedPtrField< ::QScan::ImageData >*
      mutable_images();
  const ::QScan::ImageData& images(int index) const;
  ::QScan::ImageData* add_images();
  const ::google::protobuf::RepeatedPtrField< ::QScan::ImageData >&
      images() const;

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool inverted = 3;
  void clear_inverted();
  static const int kInvertedFieldNumber = 3;
  bool inverted() const;
  void set_inverted(bool value);

  // bool completed = 4;
  void clear_completed();
  static const int kCompletedFieldNumber = 4;
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:QScan.Page)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::QScan::TextList > text_;
  ::google::protobuf::RepeatedPtrField< ::QScan::ImageData > images_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 id_;
  bool inverted_;
  bool completed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_book_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QScan.Pages) */ {
 public:
  Pages();
  virtual ~Pages();

  Pages(const Pages& from);

  inline Pages& operator=(const Pages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pages(Pages&& from) noexcept
    : Pages() {
    *this = ::std::move(from);
  }

  inline Pages& operator=(Pages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pages* internal_default_instance() {
    return reinterpret_cast<const Pages*>(
               &_Pages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Pages* other);
  friend void swap(Pages& a, Pages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pages* New() const final {
    return CreateMaybeMessage<Pages>(NULL);
  }

  Pages* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pages>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pages& from);
  void MergeFrom(const Pages& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QScan.Page pages = 2;
  int pages_size() const;
  void clear_pages();
  static const int kPagesFieldNumber = 2;
  ::QScan::Page* mutable_pages(int index);
  ::google::protobuf::RepeatedPtrField< ::QScan::Page >*
      mutable_pages();
  const ::QScan::Page& pages(int index) const;
  ::QScan::Page* add_pages();
  const ::google::protobuf::RepeatedPtrField< ::QScan::Page >&
      pages() const;

  // string language = 1;
  void clear_language();
  static const int kLanguageFieldNumber = 1;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // @@protoc_insertion_point(class_scope:QScan.Pages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::QScan::Page > pages_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_book_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Style

// uint32 style = 1;
inline void Style::clear_style() {
  style_ = 0u;
}
inline ::google::protobuf::uint32 Style::style() const {
  // @@protoc_insertion_point(field_get:QScan.Style.style)
  return style_;
}
inline void Style::set_style(::google::protobuf::uint32 value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:QScan.Style.style)
}

// uint32 start = 2;
inline void Style::clear_start() {
  start_ = 0u;
}
inline ::google::protobuf::uint32 Style::start() const {
  // @@protoc_insertion_point(field_get:QScan.Style.start)
  return start_;
}
inline void Style::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:QScan.Style.start)
}

// uint32 length = 3;
inline void Style::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 Style::length() const {
  // @@protoc_insertion_point(field_get:QScan.Style.length)
  return length_;
}
inline void Style::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:QScan.Style.length)
}

// -------------------------------------------------------------------

// TextList

// uint32 id = 1;
inline void TextList::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TextList::id() const {
  // @@protoc_insertion_point(field_get:QScan.TextList.id)
  return id_;
}
inline void TextList::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:QScan.TextList.id)
}

// string text = 2;
inline void TextList::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextList::text() const {
  // @@protoc_insertion_point(field_get:QScan.TextList.text)
  return text_.GetNoArena();
}
inline void TextList::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QScan.TextList.text)
}
#if LANG_CXX11
inline void TextList::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QScan.TextList.text)
}
#endif
inline void TextList::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QScan.TextList.text)
}
inline void TextList::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QScan.TextList.text)
}
inline ::std::string* TextList::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:QScan.TextList.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextList::release_text() {
  // @@protoc_insertion_point(field_release:QScan.TextList.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextList::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:QScan.TextList.text)
}

// repeated .QScan.Style styles = 3;
inline int TextList::styles_size() const {
  return styles_.size();
}
inline void TextList::clear_styles() {
  styles_.Clear();
}
inline ::QScan::Style* TextList::mutable_styles(int index) {
  // @@protoc_insertion_point(field_mutable:QScan.TextList.styles)
  return styles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::QScan::Style >*
TextList::mutable_styles() {
  // @@protoc_insertion_point(field_mutable_list:QScan.TextList.styles)
  return &styles_;
}
inline const ::QScan::Style& TextList::styles(int index) const {
  // @@protoc_insertion_point(field_get:QScan.TextList.styles)
  return styles_.Get(index);
}
inline ::QScan::Style* TextList::add_styles() {
  // @@protoc_insertion_point(field_add:QScan.TextList.styles)
  return styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QScan::Style >&
TextList::styles() const {
  // @@protoc_insertion_point(field_list:QScan.TextList.styles)
  return styles_;
}

// -------------------------------------------------------------------

// Image

// uint32 width = 1;
inline void Image::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:QScan.Image.width)
  return width_;
}
inline void Image::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:QScan.Image.width)
}

// uint32 height = 2;
inline void Image::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:QScan.Image.height)
  return height_;
}
inline void Image::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:QScan.Image.height)
}

// bytes data = 3;
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:QScan.Image.data)
  return data_.GetNoArena();
}
inline void Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QScan.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QScan.Image.data)
}
#endif
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QScan.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QScan.Image.data)
}
inline ::std::string* Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:QScan.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:QScan.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:QScan.Image.data)
}

// -------------------------------------------------------------------

// ImageData

// uint32 id = 1;
inline void ImageData::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ImageData::id() const {
  // @@protoc_insertion_point(field_get:QScan.ImageData.id)
  return id_;
}
inline void ImageData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:QScan.ImageData.id)
}

// string name = 2;
inline void ImageData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageData::name() const {
  // @@protoc_insertion_point(field_get:QScan.ImageData.name)
  return name_.GetNoArena();
}
inline void ImageData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QScan.ImageData.name)
}
#if LANG_CXX11
inline void ImageData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QScan.ImageData.name)
}
#endif
inline void ImageData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QScan.ImageData.name)
}
inline void ImageData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QScan.ImageData.name)
}
inline ::std::string* ImageData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:QScan.ImageData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageData::release_name() {
  // @@protoc_insertion_point(field_release:QScan.ImageData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:QScan.ImageData.name)
}

// .QScan.Image image = 3;
inline bool ImageData::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline void ImageData::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}
inline const ::QScan::Image& ImageData::_internal_image() const {
  return *image_;
}
inline const ::QScan::Image& ImageData::image() const {
  const ::QScan::Image* p = image_;
  // @@protoc_insertion_point(field_get:QScan.ImageData.image)
  return p != NULL ? *p : *reinterpret_cast<const ::QScan::Image*>(
      &::QScan::_Image_default_instance_);
}
inline ::QScan::Image* ImageData::release_image() {
  // @@protoc_insertion_point(field_release:QScan.ImageData.image)
  
  ::QScan::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline ::QScan::Image* ImageData::mutable_image() {
  
  if (image_ == NULL) {
    auto* p = CreateMaybeMessage<::QScan::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:QScan.ImageData.image)
  return image_;
}
inline void ImageData::set_allocated_image(::QScan::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_;
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:QScan.ImageData.image)
}

// -------------------------------------------------------------------

// Page

// uint32 id = 1;
inline void Page::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Page::id() const {
  // @@protoc_insertion_point(field_get:QScan.Page.id)
  return id_;
}
inline void Page::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:QScan.Page.id)
}

// string filename = 2;
inline void Page::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Page::filename() const {
  // @@protoc_insertion_point(field_get:QScan.Page.filename)
  return filename_.GetNoArena();
}
inline void Page::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QScan.Page.filename)
}
#if LANG_CXX11
inline void Page::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QScan.Page.filename)
}
#endif
inline void Page::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QScan.Page.filename)
}
inline void Page::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QScan.Page.filename)
}
inline ::std::string* Page::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:QScan.Page.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Page::release_filename() {
  // @@protoc_insertion_point(field_release:QScan.Page.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Page::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:QScan.Page.filename)
}

// bool inverted = 3;
inline void Page::clear_inverted() {
  inverted_ = false;
}
inline bool Page::inverted() const {
  // @@protoc_insertion_point(field_get:QScan.Page.inverted)
  return inverted_;
}
inline void Page::set_inverted(bool value) {
  
  inverted_ = value;
  // @@protoc_insertion_point(field_set:QScan.Page.inverted)
}

// bool completed = 4;
inline void Page::clear_completed() {
  completed_ = false;
}
inline bool Page::completed() const {
  // @@protoc_insertion_point(field_get:QScan.Page.completed)
  return completed_;
}
inline void Page::set_completed(bool value) {
  
  completed_ = value;
  // @@protoc_insertion_point(field_set:QScan.Page.completed)
}

// repeated .QScan.TextList text = 5;
inline int Page::text_size() const {
  return text_.size();
}
inline void Page::clear_text() {
  text_.Clear();
}
inline ::QScan::TextList* Page::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:QScan.Page.text)
  return text_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::QScan::TextList >*
Page::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:QScan.Page.text)
  return &text_;
}
inline const ::QScan::TextList& Page::text(int index) const {
  // @@protoc_insertion_point(field_get:QScan.Page.text)
  return text_.Get(index);
}
inline ::QScan::TextList* Page::add_text() {
  // @@protoc_insertion_point(field_add:QScan.Page.text)
  return text_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QScan::TextList >&
Page::text() const {
  // @@protoc_insertion_point(field_list:QScan.Page.text)
  return text_;
}

// repeated .QScan.ImageData images = 6;
inline int Page::images_size() const {
  return images_.size();
}
inline void Page::clear_images() {
  images_.Clear();
}
inline ::QScan::ImageData* Page::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:QScan.Page.images)
  return images_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::QScan::ImageData >*
Page::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:QScan.Page.images)
  return &images_;
}
inline const ::QScan::ImageData& Page::images(int index) const {
  // @@protoc_insertion_point(field_get:QScan.Page.images)
  return images_.Get(index);
}
inline ::QScan::ImageData* Page::add_images() {
  // @@protoc_insertion_point(field_add:QScan.Page.images)
  return images_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QScan::ImageData >&
Page::images() const {
  // @@protoc_insertion_point(field_list:QScan.Page.images)
  return images_;
}

// -------------------------------------------------------------------

// Pages

// string language = 1;
inline void Pages::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pages::language() const {
  // @@protoc_insertion_point(field_get:QScan.Pages.language)
  return language_.GetNoArena();
}
inline void Pages::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QScan.Pages.language)
}
#if LANG_CXX11
inline void Pages::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QScan.Pages.language)
}
#endif
inline void Pages::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QScan.Pages.language)
}
inline void Pages::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QScan.Pages.language)
}
inline ::std::string* Pages::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:QScan.Pages.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pages::release_language() {
  // @@protoc_insertion_point(field_release:QScan.Pages.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pages::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:QScan.Pages.language)
}

// repeated .QScan.Page pages = 2;
inline int Pages::pages_size() const {
  return pages_.size();
}
inline void Pages::clear_pages() {
  pages_.Clear();
}
inline ::QScan::Page* Pages::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:QScan.Pages.pages)
  return pages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::QScan::Page >*
Pages::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:QScan.Pages.pages)
  return &pages_;
}
inline const ::QScan::Page& Pages::pages(int index) const {
  // @@protoc_insertion_point(field_get:QScan.Pages.pages)
  return pages_.Get(index);
}
inline ::QScan::Page* Pages::add_pages() {
  // @@protoc_insertion_point(field_add:QScan.Pages.pages)
  return pages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QScan::Page >&
Pages::pages() const {
  // @@protoc_insertion_point(field_list:QScan.Pages.pages)
  return pages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace QScan

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_book_2eproto
